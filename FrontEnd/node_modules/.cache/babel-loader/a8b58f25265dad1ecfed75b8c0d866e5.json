{"ast":null,"code":"'use strict';\n\nconst Denque = require('denque');\n\nconst EventEmitter = require('events');\n\nconst ServerDescription = require('./server_description').ServerDescription;\n\nconst ServerType = require('./common').ServerType;\n\nconst TopologyDescription = require('./topology_description').TopologyDescription;\n\nconst TopologyType = require('./common').TopologyType;\n\nconst events = require('./events');\n\nconst Server = require('./server').Server;\n\nconst relayEvents = require('../utils').relayEvents;\n\nconst ReadPreference = require('../topologies/read_preference');\n\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\n\nconst CoreCursor = require('../cursor').CoreCursor;\n\nconst deprecate = require('util').deprecate;\n\nconst BSON = require('../connection/utils').retrieveBSON();\n\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\n\nconst isRetryableError = require('../error').isRetryableError;\n\nconst isNodeShuttingDownError = require('../error').isNodeShuttingDownError;\n\nconst maxWireVersion = require('../utils').maxWireVersion;\n\nconst ClientSession = require('../sessions').ClientSession;\n\nconst MongoError = require('../error').MongoError;\n\nconst MongoServerSelectionError = require('../error').MongoServerSelectionError;\n\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\n\nconst SrvPoller = require('./srv_polling').SrvPoller;\n\nconst getMMAPError = require('../topologies/shared').getMMAPError;\n\nconst makeStateMachine = require('../utils').makeStateMachine;\n\nconst eachAsync = require('../utils').eachAsync;\n\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\n\nconst ServerSessionPool = require('../sessions').ServerSessionPool;\n\nconst makeClientMetadata = require('../utils').makeClientMetadata;\n\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\n\nconst common = require('./common');\n\nconst drainTimerQueue = common.drainTimerQueue;\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nconst serverSelection = require('./server_selection');\n\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nconst writableServerSelector = serverSelection.writableServerSelector; // const selectServers = serverSelection.selectServers;\n// Global state\n\nlet globalTopologyCounter = 0; // events that we relay to the `Topology`\n\nconst SERVER_RELAY_EVENTS = ['serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'commandStarted', 'commandSucceeded', 'commandFailed', // NOTE: Legacy events\n'monitoring'].concat(CMAP_EVENT_NAMES); // all events we listen to from `Server` instances\n\nconst LOCAL_SERVER_EVENTS = ['error', 'connect', 'descriptionReceived', 'close', 'ended'];\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\nconst DEPRECATED_OPTIONS = new Set(['autoReconnect', 'reconnectTries', 'reconnectInterval', 'bufferMaxEntries']);\nconst kCancelled = Symbol('cancelled');\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\n\nclass Topology extends EventEmitter {\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  constructor(seedlist, options) {\n    super();\n\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = []; // this is for legacy single server constructor support\n\n      if (options.host) {\n        seedlist.push({\n          host: options.host,\n          port: options.port\n        });\n      }\n    }\n\n    seedlist = seedlist || [];\n\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(Object.assign(options, {\n      metadata: makeClientMetadata(options),\n      compression: {\n        compressors: createCompressionInfo(options)\n      }\n    }));\n    DEPRECATED_OPTIONS.forEach(optionName => {\n      if (options[optionName]) {\n        emitDeprecationWarning(`The option \\`${optionName}\\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`, 'DeprecationWarning');\n      }\n    });\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(topologyType, serverDescriptions, options.replicaSet, null, null, null, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      this.s.srvPoller = options.srvPoller || new SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        // TODO: GET THIS\n        logger: options.logger,\n        loggerLevel: options.loggerLevel\n      });\n\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    } // NOTE: remove this when NODE-1709 is resolved\n\n\n    this.setMaxListeners(Infinity);\n  }\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n  /**\n   * Initiate server connect\n   *\n   * @param {Object} [options] Optional settings\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\n   * @param {function} [callback] An optional callback called once on the first connected server\n   */\n\n\n  connect(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {};\n\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    connectServers(this, Array.from(this.s.description.servers.values()));\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n\n        if (typeof callback === 'function') {\n          callback(err);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      const errorHandler = err => {\n        stateTransition(this, STATE_CLOSED);\n        server.removeListener('connect', connectHandler);\n        if (typeof callback === 'function') callback(err, null);\n      };\n\n      const connectHandler = (_, err) => {\n        stateTransition(this, STATE_CONNECTED);\n        server.removeListener('error', errorHandler);\n        this.emit('open', err, this);\n        this.emit('connect', this);\n        if (typeof callback === 'function') callback(err, this);\n      };\n\n      if (server.s.state === STATE_CONNECTING) {\n        server.once('error', errorHandler);\n        server.once('connect', connectHandler);\n        return;\n      }\n\n      connectHandler();\n    });\n  }\n  /**\n   * Close this topology\n   */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options || {};\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    this.s.sessions.forEach(session => session.endSession());\n    this.s.sessionPool.endAllPooledSessions(() => {\n      eachAsync(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n        this.s.servers.clear(); // emit an event for close\n\n        this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));\n        stateTransition(this, STATE_CLOSED);\n        this.emit('close');\n\n        if (typeof callback === 'function') {\n          callback(err);\n        }\n      });\n    });\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param {object} [options] Optional settings related to server selection\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n   * @param {function} callback The callback used to indicate success or failure\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n   */\n\n\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n\n      if (typeof selector !== 'function') {\n        options = selector;\n        let readPreference;\n\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          translateReadPreference(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    } // support server selection by options with readPreference\n\n\n    let serverSelector = selector;\n\n    if (typeof selector === 'object') {\n      const readPreference = selector.readPreference ? selector.readPreference : ReadPreference.primary;\n      serverSelector = readPreferenceServerSelector(readPreference);\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    } // place the member at the front of the wait queue\n\n\n    this[kWaitQueue].unshift(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\n   * @return Whether the topology should initiate selection to determine session support\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @return Whether sessions are supported on the current topology\n   */\n\n\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /**\n   * Start a logical session\n   */\n\n\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /**\n   * Send endSessions command(s) with the given session ids\n   *\n   * @param {Array} sessions The sessions to end\n   * @param {function} [callback]\n   */\n\n\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command('admin.$cmd', {\n      endSessions: sessions\n    }, {\n      readPreference: ReadPreference.primaryPreferred,\n      noResponse: true\n    }, () => {\n      // intentionally ignored, per spec\n      if (typeof callback === 'function') callback();\n    });\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address); // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to update anything or emit SDAM events\n\n\n    if (previousServerDescription && previousServerDescription.equals(serverDescription)) {\n      return;\n    } // first update the TopologyDescription\n\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    this.emit('serverDescriptionChanged', new events.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, this.s.description.servers.get(serverDescription.address))); // update server list from updated descriptions\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = null;\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  } // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\n   * Insert one or more documents\n   *\n   * @param {String} ns The full qualified namespace for this operation\n   * @param {Array} ops An array of documents to insert\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\n   * @param {Object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'insert',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Perform one or more update operations\n   *\n   * @param {string} ns The fully qualified namespace for this operation\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  update(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'update',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Perform one or more remove operations\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'remove',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Execute a command\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Connection} [options.connection] Specify connection object to execute command against\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      callback = options, options = {}, options = options || {};\n    }\n\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const willRetryWrite = !options.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(this) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n\n        if (!isRetryableError(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, {\n            retrying: true\n          });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      }; // increment and assign txnNumber\n\n\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n  /**\n   * Create a new cursor\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n   * @param {object} [options] Options for the cursor\n   * @param {object} [options.batchSize=0] Batchsize for the operation\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {object} [options.topology] The internal topology of the created cursor\n   * @returns {Cursor}\n   */\n\n\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    translateReadPreference(options);\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  unref() {\n    console.log('not implemented: `unref`');\n  } // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n\n\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function () {\n    return this.s.clusterTime;\n  },\n  set: function (clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}); // legacy aliases\n\nTopology.prototype.destroy = deprecate(Topology.prototype.close, 'destroy() is deprecated, please use close() instead');\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\n\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, () => {\n    topology.emit('serverClosed', new events.ServerClosedEvent(topology.s.id, server.description.address));\n    SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\n\n\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (seedlist.length === 1 && !replicaSet) return TopologyType.Single;\n  if (replicaSet) return TopologyType.ReplicaSetNoPrimary;\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit('serverOpening', new events.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n  server.on('error', serverErrorEventHandler(server, topology));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\n\n\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    destroyServer(server, topology);\n  }\n}\n\nfunction serverErrorEventHandler(server, topology) {\n  return function (err) {\n    if (topology.s.state === STATE_CLOSING || topology.s.state === STATE_CLOSED) {\n      return;\n    }\n\n    if (maxWireVersion(server) >= 8 && !isNodeShuttingDownError(err)) {\n      resetServerState(server, err);\n      return;\n    }\n\n    resetServerState(server, err, {\n      clearPool: true\n    });\n  };\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n  const willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(topology) && !options.session.inTransaction();\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n\n      if (!isRetryableError(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, {\n          retrying: true\n        });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    } // increment and assign txnNumber\n\n\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    } // execute the write operation\n\n\n    server[op](ns, ops, options, handler);\n  });\n}\n/**\n * Resets the internal state of this server to `Unknown` by simulating an empty ismaster\n *\n * @private\n * @param {Server} server\n * @param {MongoError} error The error that caused the state reset\n * @param {object} [options] Optional settings\n * @param {boolean} [options.clearPool=false] Pool should be cleared out on state reset\n */\n\n\nfunction resetServerState(server, error, options) {\n  options = Object.assign({}, {\n    clearPool: false\n  }, options);\n\n  if (options.clearPool && server.s.pool) {\n    server.s.pool.clear();\n  }\n\n  server.emit('descriptionReceived', new ServerDescription(server.description.address, null, {\n    error\n  }));\n  process.nextTick(() => server.requestCheck());\n}\n\nfunction translateReadPreference(options) {\n  if (options.readPreference == null) {\n    return;\n  }\n\n  let r = options.readPreference;\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n    topology.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(topology.s.id, previousTopologyDescription, topology.s.description));\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.pop();\n    clearTimeout(waitQueueMember.timer);\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n\n  for (let i = 0; i < topology[kWaitQueue].length; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      break;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      break;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(server => process.nextTick(() => server.requestCheck()));\n  }\n}\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\n\nmodule.exports = {\n  Topology\n};","map":{"version":3,"sources":["/home/devansh/Desktop/ADS/final/node_modules/mongodb/lib/core/sdam/topology.js"],"names":["Denque","require","EventEmitter","ServerDescription","ServerType","TopologyDescription","TopologyType","events","Server","relayEvents","ReadPreference","isRetryableWritesSupported","CoreCursor","deprecate","BSON","retrieveBSON","createCompressionInfo","isRetryableError","isNodeShuttingDownError","maxWireVersion","ClientSession","MongoError","MongoServerSelectionError","resolveClusterTime","SrvPoller","getMMAPError","makeStateMachine","eachAsync","emitDeprecationWarning","ServerSessionPool","makeClientMetadata","CMAP_EVENT_NAMES","common","drainTimerQueue","clearAndRemoveTimerFrom","serverSelection","readPreferenceServerSelector","writableServerSelector","globalTopologyCounter","SERVER_RELAY_EVENTS","concat","LOCAL_SERVER_EVENTS","STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","stateTransition","DEPRECATED_OPTIONS","Set","kCancelled","Symbol","kWaitQueue","Topology","constructor","seedlist","options","host","push","port","parseStringSeedlist","Object","assign","TOPOLOGY_DEFAULTS","freeze","metadata","compression","compressors","forEach","optionName","topologyType","topologyTypeFromSeedlist","topologyId","serverDescriptions","reduce","result","seed","domain_socket","address","set","Map","s","id","state","description","replicaSet","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","Cursor","cursorFactory","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","MaxKey","MinKey","ObjectId","BSONRegExp","Timestamp","servers","sessionPool","sessions","promiseLibrary","Promise","credentials","clusterTime","connectionTimers","srvHost","srvPoller","logger","loggerLevel","detectTopologyDescriptionChange","ev","previousType","previousDescription","type","newType","newDescription","Sharded","handleSrvPolling","srvPollingHandler","on","start","setMaxListeners","Infinity","parserType","native","connect","callback","emit","TopologyOpeningEvent","TopologyDescriptionChangedEvent","Unknown","connectServers","Array","from","values","translateReadPreference","readPreference","primary","selectServer","err","server","close","errorHandler","removeListener","connectHandler","_","once","force","drainWaitQueue","stop","session","endSession","endAllPooledSessions","cb","destroyServer","clear","TopologyClosedEvent","selector","isSharded","transaction","undefined","serverSelector","waitQueueMember","timer","setTimeout","timeoutError","unshift","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","delete","add","endSessions","isArray","command","primaryPreferred","noResponse","serverUpdateHandler","serverDescription","hasServer","previousTopologyDescription","previousServerDescription","get","$clusterTime","equals","update","compatibilityError","ServerDescriptionChangedEvent","updateServers","length","auth","logout","insert","ns","ops","executeWriteOperation","topology","op","remove","cmd","willRetryWrite","retrying","retryWrites","inTransaction","isWriteCommand","newOptions","incrementTransactionNumber","cursor","CursorClass","clientMetadata","isConnected","isDestroyed","unref","console","log","lastIsMaster","sd","filter","commonWireVersion","defineProperty","prototype","enumerable","destroy","RETRYABLE_WRITE_OPERATIONS","some","event","removeAllListeners","ServerClosedEvent","split","map","setName","rs_name","ReplicaSetNoPrimary","randomSelection","array","Math","floor","random","createAndConnectServer","connectDelay","ServerOpeningEvent","bind","serverErrorEventHandler","connectTimer","incomingServerDescription","has","entry","serverAddress","resetServerState","clearPool","args","handler","newArgs","operationId","error","pool","process","nextTick","requestCheck","r","mode","preference","tags","maxStalenessSeconds","TypeError","updateFromSrvPollingEvent","queue","pop","clearTimeout","i","shift","selectedDescriptions","e","selectedServerDescription","selectedServer","isActive","pinServer","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst Denque = require('denque');\nconst EventEmitter = require('events');\nconst ServerDescription = require('./server_description').ServerDescription;\nconst ServerType = require('./common').ServerType;\nconst TopologyDescription = require('./topology_description').TopologyDescription;\nconst TopologyType = require('./common').TopologyType;\nconst events = require('./events');\nconst Server = require('./server').Server;\nconst relayEvents = require('../utils').relayEvents;\nconst ReadPreference = require('../topologies/read_preference');\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\nconst CoreCursor = require('../cursor').CoreCursor;\nconst deprecate = require('util').deprecate;\nconst BSON = require('../connection/utils').retrieveBSON();\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\nconst isRetryableError = require('../error').isRetryableError;\nconst isNodeShuttingDownError = require('../error').isNodeShuttingDownError;\nconst maxWireVersion = require('../utils').maxWireVersion;\nconst ClientSession = require('../sessions').ClientSession;\nconst MongoError = require('../error').MongoError;\nconst MongoServerSelectionError = require('../error').MongoServerSelectionError;\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\nconst SrvPoller = require('./srv_polling').SrvPoller;\nconst getMMAPError = require('../topologies/shared').getMMAPError;\nconst makeStateMachine = require('../utils').makeStateMachine;\nconst eachAsync = require('../utils').eachAsync;\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\nconst ServerSessionPool = require('../sessions').ServerSessionPool;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\n\nconst common = require('./common');\nconst drainTimerQueue = common.drainTimerQueue;\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nconst serverSelection = require('./server_selection');\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nconst writableServerSelector = serverSelection.writableServerSelector;\n// const selectServers = serverSelection.selectServers;\n\n// Global state\nlet globalTopologyCounter = 0;\n\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [\n  'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded',\n  'serverHeartbeatFailed',\n  'commandStarted',\n  'commandSucceeded',\n  'commandFailed',\n\n  // NOTE: Legacy events\n  'monitoring'\n].concat(CMAP_EVENT_NAMES);\n\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = ['error', 'connect', 'descriptionReceived', 'close', 'ended'];\n\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\nconst DEPRECATED_OPTIONS = new Set([\n  'autoReconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'bufferMaxEntries'\n]);\n\nconst kCancelled = Symbol('cancelled');\nconst kWaitQueue = Symbol('waitQueue');\n\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\nclass Topology extends EventEmitter {\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  constructor(seedlist, options) {\n    super();\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = [];\n\n      // this is for legacy single server constructor support\n      if (options.host) {\n        seedlist.push({ host: options.host, port: options.port });\n      }\n    }\n\n    seedlist = seedlist || [];\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(\n      Object.assign(options, {\n        metadata: makeClientMetadata(options),\n        compression: { compressors: createCompressionInfo(options) }\n      })\n    );\n\n    DEPRECATED_OPTIONS.forEach(optionName => {\n      if (options[optionName]) {\n        emitDeprecationWarning(\n          `The option \\`${optionName}\\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`,\n          'DeprecationWarning'\n        );\n      }\n    });\n\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        null,\n        null,\n        null,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson:\n        options.bson ||\n        new BSON([\n          BSON.Binary,\n          BSON.Code,\n          BSON.DBRef,\n          BSON.Decimal128,\n          BSON.Double,\n          BSON.Int32,\n          BSON.Long,\n          BSON.Map,\n          BSON.MaxKey,\n          BSON.MinKey,\n          BSON.ObjectId,\n          BSON.BSONRegExp,\n          BSON.Symbol,\n          BSON.Timestamp\n        ]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      this.s.srvPoller =\n        options.srvPoller ||\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost, // TODO: GET THIS\n          logger: options.logger,\n          loggerLevel: options.loggerLevel\n        });\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    }\n\n    // NOTE: remove this when NODE-1709 is resolved\n    this.setMaxListeners(Infinity);\n  }\n\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n\n  /**\n   * Initiate server connect\n   *\n   * @param {Object} [options] Optional settings\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\n   * @param {function} [callback] An optional callback called once on the first connected server\n   */\n  connect(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    connectServers(this, Array.from(this.s.description.servers.values()));\n\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n\n        if (typeof callback === 'function') {\n          callback(err);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      const errorHandler = err => {\n        stateTransition(this, STATE_CLOSED);\n        server.removeListener('connect', connectHandler);\n        if (typeof callback === 'function') callback(err, null);\n      };\n\n      const connectHandler = (_, err) => {\n        stateTransition(this, STATE_CONNECTED);\n        server.removeListener('error', errorHandler);\n        this.emit('open', err, this);\n        this.emit('connect', this);\n\n        if (typeof callback === 'function') callback(err, this);\n      };\n\n      if (server.s.state === STATE_CONNECTING) {\n        server.once('error', errorHandler);\n        server.once('connect', connectHandler);\n        return;\n      }\n\n      connectHandler();\n    });\n  }\n\n  /**\n   * Close this topology\n   */\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = { force: options };\n    }\n\n    options = options || {};\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    this.s.sessions.forEach(session => session.endSession());\n    this.s.sessionPool.endAllPooledSessions(() => {\n      eachAsync(\n        Array.from(this.s.servers.values()),\n        (server, cb) => destroyServer(server, this, options, cb),\n        err => {\n          this.s.servers.clear();\n\n          // emit an event for close\n          this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));\n\n          stateTransition(this, STATE_CLOSED);\n          this.emit('close');\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param {object} [options] Optional settings related to server selection\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n   * @param {function} callback The callback used to indicate success or failure\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      if (typeof selector !== 'function') {\n        options = selector;\n\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          translateReadPreference(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    // support server selection by options with readPreference\n    let serverSelector = selector;\n    if (typeof selector === 'object') {\n      const readPreference = selector.readPreference\n        ? selector.readPreference\n        : ReadPreference.primary;\n\n      serverSelector = readPreferenceServerSelector(readPreference);\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    // place the member at the front of the wait queue\n    this[kWaitQueue].unshift(waitQueueMember);\n    processWaitQueue(this);\n  }\n\n  // Sessions related methods\n\n  /**\n   * @return Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport() {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n\n  /**\n   * @return Whether sessions are supported on the current topology\n   */\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /**\n   * Start a logical session\n   */\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  /**\n   * Send endSessions command(s) with the given session ids\n   *\n   * @param {Array} sessions The sessions to end\n   * @param {function} [callback]\n   */\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command(\n      'admin.$cmd',\n      { endSessions: sessions },\n      { readPreference: ReadPreference.primaryPreferred, noResponse: true },\n      () => {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      }\n    );\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to update anything or emit SDAM events\n    if (previousServerDescription && previousServerDescription.equals(serverDescription)) {\n      return;\n    }\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    this.emit(\n      'serverDescriptionChanged',\n      new events.ServerDescriptionChangedEvent(\n        this.s.id,\n        serverDescription.address,\n        previousServerDescription,\n        this.s.description.servers.get(serverDescription.address)\n      )\n    );\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    this.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = null);\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\n   * Insert one or more documents\n   *\n   * @param {String} ns The full qualified namespace for this operation\n   * @param {Array} ops An array of documents to insert\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\n   * @param {Object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'insert', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more update operations\n   *\n   * @param {string} ns The fully qualified namespace for this operation\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  update(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'update', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more remove operations\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'remove', ns, ops }, options, callback);\n  }\n\n  /**\n   * Execute a command\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Connection} [options.connection] Specify connection object to execute command against\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options || {});\n    }\n\n    translateReadPreference(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const willRetryWrite =\n        !options.retrying &&\n        !!options.retryWrites &&\n        options.session &&\n        isRetryableWritesSupported(this) &&\n        !options.session.inTransaction() &&\n        isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n        if (!isRetryableError(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, { retrying: true });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      };\n\n      // increment and assign txnNumber\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n\n  /**\n   * Create a new cursor\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n   * @param {object} [options] Options for the cursor\n   * @param {object} [options.batchSize=0] Batchsize for the operation\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {object} [options.topology] The internal topology of the created cursor\n   * @returns {Cursor}\n   */\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    translateReadPreference(options);\n\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  unref() {\n    console.log('not implemented: `unref`');\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function() {\n    return this.s.clusterTime;\n  },\n  set: function(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n});\n\n// legacy aliases\nTopology.prototype.destroy = deprecate(\n  Topology.prototype.close,\n  'destroy() is deprecated, please use close() instead'\n);\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n\n  server.destroy(options, () => {\n    topology.emit(\n      'serverClosed',\n      new events.ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (seedlist.length === 1 && !replicaSet) return TopologyType.Single;\n  if (replicaSet) return TopologyType.ReplicaSetNoPrimary;\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit(\n    'serverOpening',\n    new events.ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n  server.on('error', serverErrorEventHandler(server, topology));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    destroyServer(server, topology);\n  }\n}\n\nfunction serverErrorEventHandler(server, topology) {\n  return function(err) {\n    if (topology.s.state === STATE_CLOSING || topology.s.state === STATE_CLOSED) {\n      return;\n    }\n\n    if (maxWireVersion(server) >= 8 && !isNodeShuttingDownError(err)) {\n      resetServerState(server, err);\n      return;\n    }\n\n    resetServerState(server, err, { clearPool: true });\n  };\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(topology) &&\n    !options.session.inTransaction();\n\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n      if (!isRetryableError(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, { retrying: true });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    }\n\n    // increment and assign txnNumber\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    }\n\n    // execute the write operation\n    server[op](ns, ops, options, handler);\n  });\n}\n\n/**\n * Resets the internal state of this server to `Unknown` by simulating an empty ismaster\n *\n * @private\n * @param {Server} server\n * @param {MongoError} error The error that caused the state reset\n * @param {object} [options] Optional settings\n * @param {boolean} [options.clearPool=false] Pool should be cleared out on state reset\n */\nfunction resetServerState(server, error, options) {\n  options = Object.assign({}, { clearPool: false }, options);\n\n  if (options.clearPool && server.s.pool) {\n    server.s.pool.clear();\n  }\n\n  server.emit(\n    'descriptionReceived',\n    new ServerDescription(server.description.address, null, { error })\n  );\n\n  process.nextTick(() => server.requestCheck());\n}\n\nfunction translateReadPreference(options) {\n  if (options.readPreference == null) {\n    return;\n  }\n\n  let r = options.readPreference;\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n\n    topology.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        topology.s.id,\n        previousTopologyDescription,\n        topology.s.description\n      )\n    );\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.pop();\n    clearTimeout(waitQueueMember.timer);\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  for (let i = 0; i < topology[kWaitQueue].length; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector\n        ? serverSelector(topology.description, serverDescriptions)\n        : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      break;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      break;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(server => process.nextTick(() => server.requestCheck()));\n  }\n}\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\nmodule.exports = {\n  Topology\n};\n"]},"metadata":{},"sourceType":"script"}