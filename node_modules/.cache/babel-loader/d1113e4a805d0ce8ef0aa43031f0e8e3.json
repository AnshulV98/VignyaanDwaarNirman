{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst NativeTopology = require('../topologies/native_topology');\n\nclass CloseOperation extends OperationBase {\n  constructor(client, force) {\n    super();\n    this.client = client;\n    this.force = force;\n  }\n\n  execute(callback) {\n    const client = this.client;\n    const force = this.force;\n\n    const completeClose = err => {\n      client.emit('close', client);\n\n      if (!(client.topology instanceof NativeTopology)) {\n        for (const item of client.s.dbCache) {\n          item[1].emit('close', client);\n        }\n      }\n\n      client.removeAllListeners('close');\n      callback(err, null);\n    };\n\n    if (client.topology == null) {\n      completeClose();\n      return;\n    }\n\n    client.topology.close(force, err => {\n      const autoEncrypter = client.topology.s.options.autoEncrypter;\n\n      if (!autoEncrypter) {\n        completeClose(err);\n        return;\n      }\n\n      autoEncrypter.teardown(force, err2 => completeClose(err || err2));\n    });\n  }\n\n}\n\ndefineAspects(CloseOperation, [Aspect.SKIP_SESSION]);\nmodule.exports = CloseOperation;","map":{"version":3,"sources":["/home/devansh/Desktop/ADS/final/node_modules/mongodb/lib/operations/close.js"],"names":["Aspect","require","defineAspects","OperationBase","NativeTopology","CloseOperation","constructor","client","force","execute","callback","completeClose","err","emit","topology","item","s","dbCache","removeAllListeners","close","autoEncrypter","options","teardown","err2","SKIP_SESSION","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AACA,MAAME,aAAa,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,aAA7C;;AACA,MAAMC,aAAa,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,aAA7C;;AACA,MAAMC,cAAc,GAAGH,OAAO,CAAC,+BAAD,CAA9B;;AAEA,MAAMI,cAAN,SAA6BF,aAA7B,CAA2C;AACzCG,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgB;AACzB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;AAEDC,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMH,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,KAAK,GAAG,KAAKA,KAAnB;;AACA,UAAMG,aAAa,GAAGC,GAAG,IAAI;AAC3BL,MAAAA,MAAM,CAACM,IAAP,CAAY,OAAZ,EAAqBN,MAArB;;AAEA,UAAI,EAAEA,MAAM,CAACO,QAAP,YAA2BV,cAA7B,CAAJ,EAAkD;AAChD,aAAK,MAAMW,IAAX,IAAmBR,MAAM,CAACS,CAAP,CAASC,OAA5B,EAAqC;AACnCF,UAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQF,IAAR,CAAa,OAAb,EAAsBN,MAAtB;AACD;AACF;;AAEDA,MAAAA,MAAM,CAACW,kBAAP,CAA0B,OAA1B;AACAR,MAAAA,QAAQ,CAACE,GAAD,EAAM,IAAN,CAAR;AACD,KAXD;;AAaA,QAAIL,MAAM,CAACO,QAAP,IAAmB,IAAvB,EAA6B;AAC3BH,MAAAA,aAAa;AACb;AACD;;AAEDJ,IAAAA,MAAM,CAACO,QAAP,CAAgBK,KAAhB,CAAsBX,KAAtB,EAA6BI,GAAG,IAAI;AAClC,YAAMQ,aAAa,GAAGb,MAAM,CAACO,QAAP,CAAgBE,CAAhB,CAAkBK,OAAlB,CAA0BD,aAAhD;;AACA,UAAI,CAACA,aAAL,EAAoB;AAClBT,QAAAA,aAAa,CAACC,GAAD,CAAb;AACA;AACD;;AAEDQ,MAAAA,aAAa,CAACE,QAAd,CAAuBd,KAAvB,EAA8Be,IAAI,IAAIZ,aAAa,CAACC,GAAG,IAAIW,IAAR,CAAnD;AACD,KARD;AASD;;AArCwC;;AAwC3CrB,aAAa,CAACG,cAAD,EAAiB,CAACL,MAAM,CAACwB,YAAR,CAAjB,CAAb;AAEAC,MAAM,CAACC,OAAP,GAAiBrB,cAAjB","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\nconst OperationBase = require('./operation').OperationBase;\nconst NativeTopology = require('../topologies/native_topology');\n\nclass CloseOperation extends OperationBase {\n  constructor(client, force) {\n    super();\n    this.client = client;\n    this.force = force;\n  }\n\n  execute(callback) {\n    const client = this.client;\n    const force = this.force;\n    const completeClose = err => {\n      client.emit('close', client);\n\n      if (!(client.topology instanceof NativeTopology)) {\n        for (const item of client.s.dbCache) {\n          item[1].emit('close', client);\n        }\n      }\n\n      client.removeAllListeners('close');\n      callback(err, null);\n    };\n\n    if (client.topology == null) {\n      completeClose();\n      return;\n    }\n\n    client.topology.close(force, err => {\n      const autoEncrypter = client.topology.s.options.autoEncrypter;\n      if (!autoEncrypter) {\n        completeClose(err);\n        return;\n      }\n\n      autoEncrypter.teardown(force, err2 => completeClose(err || err2));\n    });\n  }\n}\n\ndefineAspects(CloseOperation, [Aspect.SKIP_SESSION]);\n\nmodule.exports = CloseOperation;\n"]},"metadata":{},"sourceType":"script"}